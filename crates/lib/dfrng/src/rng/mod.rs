/*
 * Copyright (C) 2025 Pierre Fouilloux, Hibiscus Collective
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with this program.
 * If not, see https://www.gnu.org/licenses/.
 */

//! # Random Number Generation
//!
//! This module provides random number generation utilities for tabletop gaming applications.
//!
//! The module offers:
//! - A [`Random`] trait that defines a common interface for random number generators
//! - An implementation of this trait using thread-local random number generation ([`UniformThreadRandom`])
//! - Test utilities for predictable random number generation
//!
//! ## Examples
//!
//! ```
//! use dfrng::rng::{Random, UniformThreadRandom};
//!
//! // Create a random number generator for values between 1 and 100
//! let mut rng = UniformThreadRandom::new(1, 100).unwrap();
//!
//! // Generate a single random number
//! let value = rng.next();
//! assert!(value >= 1 && value <= 100);
//!
//! // Generate multiple random numbers
//! let values = rng.take(5);
//! assert_eq!(values.len(), 5);
//! for &value in &values {
//!     assert!(value >= 1 && value <= 100);
//! }
//! ```

#[cfg(test)]
pub mod test;

use core::fmt::Debug;
use std::fmt;

use fmt::Formatter;
use rand::{
    distr::{Distribution as _, Uniform, uniform::SampleUniform},
    prelude::ThreadRng,
};

/// Trait for random number generators.
///
/// This trait defines a common interface for random number generators,
/// allowing different implementations to be used interchangeably.
///
/// # Type Parameters
///
/// * `T` - The type of values generated by this random number generator
///
/// # Examples
///
/// ```
/// use dfrng::rng::{Random, UniformThreadRandom};
///
/// // Create a random number generator
/// let mut rng = UniformThreadRandom::new(1, 6).unwrap();
///
/// // Generate a random number
/// let value = rng.next();
/// assert!(value >= 1 && value <= 6);
/// ```
pub trait Random<T> {
    /// Generates the next random value.
    ///
    /// # Returns
    ///
    /// A random value of type `T`
    ///
    /// # Examples
    ///
    /// ```
    /// use dfrng::rng::{Random, UniformThreadRandom};
    ///
    /// let mut rng = UniformThreadRandom::new(1, 20).unwrap();
    /// let value = rng.next();
    /// assert!(value >= 1 && value <= 20);
    /// ```
    fn next(&mut self) -> T;

    /// Generates multiple random values.
    ///
    /// # Arguments
    ///
    /// * `n` - The number of random values to generate
    ///
    /// # Returns
    ///
    /// A vector containing `n` random values of type `T`
    ///
    /// # Examples
    ///
    /// ```
    /// use dfrng::rng::{Random, UniformThreadRandom};
    ///
    /// let mut rng = UniformThreadRandom::new(1, 10).unwrap();
    /// let values = rng.take(5);
    /// assert_eq!(values.len(), 5);
    /// for &value in &values {
    ///     assert!(value >= 1 && value <= 10);
    /// }
    /// ```
    fn take(&mut self, n: usize) -> Vec<T>;
}

/// A random number generator that produces uniformly distributed values using thread-local randomness.
///
/// This struct uses the `rand` crate's `ThreadRng` to generate random numbers with a uniform
/// distribution between specified bounds.
///
/// # Type Parameters
///
/// * `T` - The type of values generated by this random number generator, must implement `SampleUniform`
///
/// # Examples
///
/// ```
/// use dfrng::rng::{Random, UniformThreadRandom};
///
/// // Create a random number generator for values between 1 and 100
/// let mut rng = UniformThreadRandom::new(1, 100).unwrap();
///
/// // Generate a random number
/// let value = rng.next();
/// assert!(value >= 1 && value <= 100);
/// ```
pub struct UniformThreadRandom<T: SampleUniform> {
    /// The uniform distribution used to generate random values
    distribution: Uniform<T>,

    /// The thread-local random number generator used to generate random values
    rng: ThreadRng,
}

impl<T: SampleUniform> UniformThreadRandom<T> {
    /// Creates a new random number generator with the specified bounds.
    ///
    /// # Arguments
    ///
    /// * `low` - The lower bound (inclusive)
    /// * `high` - The upper bound (inclusive)
    ///
    /// # Returns
    ///
    /// A `Result` containing either the new random number generator or an error
    /// if the bounds are invalid (e.g., if `low > high`).
    ///
    /// # Examples
    ///
    /// ```
    /// use dfrng::rng::UniformThreadRandom;
    ///
    /// // Create a random number generator for values between 1 and 6
    /// let rng = UniformThreadRandom::new(1, 6).unwrap();
    ///
    /// // This will fail because the lower bound is greater than the upper bound
    /// let result = UniformThreadRandom::<u8>::new(10, 5);
    /// assert!(result.is_err());
    /// ```
    ///
    /// # Errors
    ///
    /// The `UniformThreadRandom` struct uses the `Uniform` distribution from the `rand` crate
    /// to generate random numbers. Errors can occur if the bounds are invalid, such as if
    /// `low > high`. In this case, the `UniformThreadRandom::new` constructor will return
    /// an error.
    #[inline]
    pub fn new(low: T, high: T) -> crate::Result<Self> {
        let distribution = Uniform::new_inclusive(low, high)?;
        Ok(Self {
            distribution,
            rng: ThreadRng::default(),
        })
    }
}

impl<T: SampleUniform> Debug for UniformThreadRandom<T> {
    #[inline]
    #[expect(clippy::min_ident_chars, reason = "Conflicts with lint requiring same names as trait")]
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
        f.debug_struct("UniformThreadRandom").finish()
    }
}

impl<T: SampleUniform> Random<T> for UniformThreadRandom<T> {
    /// Generates the next random value within the configured bounds.
    ///
    /// # Returns
    ///
    /// A random value of type `T` between the lower and upper bounds (inclusive)
    #[inline]
    fn next(&mut self) -> T {
        self.distribution.sample(&mut self.rng)
    }

    /// Generates multiple random values within the configured bounds.
    ///
    /// # Arguments
    ///
    /// * `n` - The number of random values to generate
    ///
    /// # Returns
    ///
    /// A vector containing `n` random values of type `T`, each between the lower and upper bounds (inclusive)
    #[inline]
    fn take(&mut self, n: usize) -> Vec<T> {
        (&self.distribution).sample_iter(&mut self.rng).take(n).collect()
    }
}
